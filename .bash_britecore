#BDE setups
export REPO_DIR=~/bx
export BRITE_DEV=$REPO_DIR/britedevenv
export PATH=$PATH:$BRITE_DEV
export COMPOSE_HTTP_TIMEOUT=300
export DEPLOYMENT_PATH=/srv/www

#shorthand tools for BDE
alias regen_env="python $BRITE_DEV/tools/cfg_to_env.py $REPO_DIR/britecore/britecore.cfg"
alias sequel_env="python $BRITE_DEV/tools/sequelpro.py"
alias create_client="python $BRITE_DEV/create_client.py"
alias docker_stat="docker system df"
alias destroy_dangling="./tools/destroy_all.sh"

make_yml() {
	python $BRITE_DEV/create_client.py $1
}

build_env() {
	originating_dir=$(pwd)
	cd $BRITE_DEV
    docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 build
	docker volume create --name="$1-db"
	docker volume create --name="$1-elasticsearch"
	cd $originating_dir
}

start_env() {
	docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 up -d
}

stop_env() {
	docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 stop
}

down_env() {
	docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 down
}

enter_web() {
	docker exec -it "$1_web_1" bash
}

existing_ymls() {
	echo ""
	for yml in $BRITE_DEV/clients-*; do
	    echo -n "$yml - [Last Modified] "; stat -f "%Sm" -t "%Y-%m-%d %H:%M" "$yml"
	done;
	echo ""
}

cleanup_containers() {
	docker rm "$1_web_1"
	docker rm "$1_db-setup_1"
	docker rm "$1_task-queue_1"
	docker rm "$1_britecore_1"
	docker rm "$1_db_1"
	docker rm "$1_base_1"
	docker rm "$1_rabbitmq_1"
	docker rm "$1_redis_1"
	docker rm "$1_elasticsearch_1"
}

cleanup_images() {
	docker image rm "$1_db-setup"
	docker image rm "$1_task-queue"
	docker image rm "$1_web"
}

cleanup_volumes() {
	docker volume rm "$1-db"
	docker volume rm "$1-elasticsearch"
}

delete_env() {
	down_env $1
	cleanup_images $1
	cleanup_volumes $1
	docker_stat
}

stat_env() {
	if [ -z $1 ]
	then
	    docker ps --format '{{.Names}}'
	else
	    docker ps --format '{{.Names}}' | grep $1
	fi
}


help_env() {
	echo ""

    echo "make_yml  <client-name>"
	echo "build_env <client-name>"
	echo "start_env <client-name>"
	echo "stop_env  <client-name>"
	echo "down_env  <client-name>"
	echo "enter_web <client-name>"
	echo "existing_ymls"
	echo "regen_env"
    echo "sequel_env"
	echo "destroy_dangling"
	echo "docker_stat"
	echo "create_client"
	echo "stat_env"
	echo "stat_env <client-name>"
	echo "delete_env <client-name>"
    echo "sequel_env <client-name>"

	echo ""
}