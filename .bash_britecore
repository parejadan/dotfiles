#BDE setups
export REPO_DIR=~/bx
export BRITE_DEV=$REPO_DIR/britedevenv
export PATH=$PATH:$BRITE_DEV
export COMPOSE_HTTP_TIMEOUT=300
export PYTHON_VENVS=~/venvs
export sandbox="test_britecore"

# mysql client dependencies
export PATH="/usr/local/opt/mysql-client/bin:$PATH"
export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/opt/openssl/lib/"

#shorthand tools for BDE
alias regen_env="python $BRITE_DEV/tools/cfg_to_env.py $REPO_DIR/britecore/britecore.cfg"
alias sequel_env="python $BRITE_DEV/tools/sequelpro.py"
alias create_client="python $BRITE_DEV/create_client.py"
alias docker_stat="docker system df"
alias destroy_dangling="./tools/destroy_all.sh"
alias main_editor="code"
alias activate_p3="source $PYTHON_VENVS/venv3.7/bin/activate"
alias activate_p2="source $PYTHON_VENVS/venv2.7/bin/activate"

create_sandbox() {
	python $BRITE_DEV/create_test_client.py
	mv $BRITE_DEV/test_britecore.yml $BRITE_DEV/clients-test_britecore.yml
}

build_env() {
	originating_dir=$(pwd)
	cd $BRITE_DEV
	docker volume create --name $1-db
	docker volume create --name $1-elasticsearch
    docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 build
	cd $originating_dir
}

start_env() {
	originating_dir=$(pwd)
	cd $BRITE_DEV
	docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 up -d
	cd $originating_dir
}

stop_env() {
	originating_dir=$(pwd)
	cd $BRITE_DEV
	docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 stop
	cd $originating_dir
}

down_env() {
	originating_dir=$(pwd)
	cd $BRITE_DEV
	docker-compose -f "$BRITE_DEV/clients-$1.yml" -p $1 down
	cd $originating_dir
}

enter_web() {
	docker exec -it "$1_web_1" bash
}

existing_ymls() {
	echo ""
	for yml in $BRITE_DEV/clients-*; do
	    echo -n "$yml - [Last Modified] "; stat -f "%Sm" -t "%Y-%m-%d %H:%M" "$yml"
	done;
	echo ""
}

cleanup_containers() {
	docker rm "$1_web_1"
	docker rm "$1_db-setup_1"
	docker rm "$1_task-queue_1"
	docker rm "$1_britecore_1"
	docker rm "$1_db_1"
	docker rm "$1_base_1"
	docker rm "$1_rabbitmq_1"
	docker rm "$1_redis_1"
	docker rm "$1_elasticsearch_1"
}

cleanup_images() {
	docker image rm "$1_db-setup"
	docker image rm "$1_task-queue"
	docker image rm "$1_web"
}

cleanup_volumes() {
	docker volume rm "$1-db"
	docker volume rm "$1-elasticsearch"
}

delete_env() {
	down_env $1
	cleanup_images $1
	cleanup_volumes $1
	docker_stat
}

stat_env() {
	if [ -z $1 ]
	then
	    docker ps --format '{{.Names}}'
	else
	    docker ps --format '{{.Names}}' | grep $1
	fi
}

open_yml() {
	main_editor "$BRITE_DEV/clients-$1.yml"
}


audit_git_email() {
	OLD_EMAIL=$1
	CORRECT_EMAIL=$2
	git filter-branch -f --env-filter \
	"GIT_AUTHOR_NAME='Daniel Pareja'; GIT_AUTHOR_EMAIL='$CORRECT_EMAIL'; \
	GIT_COMMITTER_NAME='Daniel Pareja'; GIT_COMMITTER_EMAIL='$OLD_EMAIL';" HEAD
}


stat_smore() {
	tsh ls | grep $1 | tr ' ' '\n' | awk '/$1/ && !/name=/'
}


ssh_smore() {
    tsh ssh $1
}


help_env() {
	echo ""

    echo "make_yml  <client-name>"
	echo "build_env <client-name>"
	echo "start_env <client-name>"
	echo "stop_env  <client-name>"
	echo "down_env  <client-name>"
	echo "enter_web <client-name>"
	echo "existing_ymls"
	echo "regen_env"
    echo "sequel_env"
	echo "destroy_dangling"
	echo "activate_p2  # use python2.7"
	echo "activate_p3  # use python3.7.3"
	echo "docker_stat"
	echo "create_client"
	echo "create_sandbox"
	echo "stat_env"
	echo "open_yml <client_name>"
	echo "stat_env <client-name>"
	echo "delete_env <client-name>"
    echo "sequel_env <client-name>"
	echo "audit_git_email <old-email> <new-email>"
    echo "stat_smore <smore-name>"
	echo "ssh_smore <output-of-stat-smore>"
	echo ""
}